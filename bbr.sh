#!/bin/bash

# 常量定义
declare -A SYSCTL_SETTINGS=(
    ["net.ipv4.tcp_rmem"]="4096	87380	6291456"
    ["net.ipv4.tcp_wmem"]="4096	87380	6291456"
    ["net.core.rmem_max"]=33554432
    ["net.core.wmem_max"]=33554432
    ["net.ipv4.tcp_fin_timeout"]=20
    ["net.ipv4.tcp_tw_reuse"]=1
    ["net.ipv4.tcp_window_scaling"]=1
    ["net.core.default_qdisc"]="fq"
    ["net.ipv4.tcp_congestion_control"]="bbr"
    ["net.ipv4.tcp_fastopen"]=3
    ["net.ipv4.tcp_keepalive_time"]=300
    ["net.ipv4.tcp_keepalive_intvl"]=75
    ["net.ipv4.tcp_keepalive_probes"]=9
    ["net.ipv4.tcp_syncookies"]=1
    ["net.ipv4.tcp_max_syn_backlog"]=8192
    ["net.ipv4.tcp_synack_retries"]=2
    ["net.ipv4.ip_local_port_range"]="1024	65535"
)

CONFIG_FILE="/etc/sysctl.d/99-bbr.conf"
MODULES=("tcp_bbr")

# 工具函数
die() {
    echo -e "\033[31m[错误] $*\033[0m" >&2
    exit 1
}

info() {
    echo -e "\033[34m[信息] $*\033[0m"
}

check_root() {
    [ "$(id -u)" -eq 0 ] || die "该脚本必须以 root 权限运行！"
}

validate_setting() {
    local key=$1 expected=$2 actual
    actual=$(sysctl -n "$key" 2>/dev/null)
    [ "$actual" = "$expected" ] || die "$key 设置失败 (当前: '$actual', 期望: '$expected')"
}

module_available() {
    modinfo "$1" &>/dev/null
}

# 主逻辑
main() {
    check_root
    info "正在优化系统网络参数..."

    # 检查内核版本 ≥ 4.9
    [ "$(uname -r | awk -F. '{ printf("%d%02d", $1,$2) }')" -ge 409 ] || die "需要 Linux 内核 ≥ 4.9 (当前: $(uname -r))"

    # 检查BBR是否可用
    grep -qw bbr /proc/sys/net/ipv4/tcp_available_congestion_control || die "当前内核不支持 BBR 拥塞控制算法。"

    # 加载内核模块
    for module in "${MODULES[@]}"; do
        if ! module_available "$module"; then
            die "内核模块 ${module} 不存在，请确保内核支持该模块。"
        fi
        if ! lsmod | grep -qw "$module" && ! [ -d "/sys/module/${module}" ]; then
            info "正在加载内核模块: ${module}..."
            modprobe "$module" || die "无法加载模块 ${module}，请检查内核配置。"
        fi
    done

    # 设置并验证sysctl参数
    for key in "${!SYSCTL_SETTINGS[@]}"; do
        sysctl -w "$key=${SYSCTL_SETTINGS[$key]}" >/dev/null
        validate_setting "$key" "${SYSCTL_SETTINGS[$key]}"
    done

    # 持久化配置
    info "正在保存配置到 ${CONFIG_FILE}..."
    if [ -f "$CONFIG_FILE" ]; then
        cp -v "$CONFIG_FILE" "${CONFIG_FILE}.bak-$(date +%s)" || die "备份配置文件失败，无法继续。"
    fi
    {
        echo "# Generated by $(basename "$0") at $(date)"
        for key in $(echo "${!SYSCTL_SETTINGS[@]}" | tr ' ' '\n' | sort); do
            echo "${key}=${SYSCTL_SETTINGS[$key]}"
        done
    } > "$CONFIG_FILE" || die "无法写入配置文件 ${CONFIG_FILE}（权限不足或磁盘空间不足）。"
    chmod 644 "$CONFIG_FILE"

    # 应用配置
    sysctl -p "$CONFIG_FILE" || die "持久化配置应用失败，请检查 ${CONFIG_FILE} 内容。"

    # 重启systemd-sysctl服务（如果存在）
    if command -v systemctl &>/dev/null && systemctl is-active systemd-sysctl &>/dev/null; then
        info "正在重启 systemd-sysctl 服务..."
        systemctl restart systemd-sysctl
    fi

    # 最终验证
    info "关键参数验证:"
    [ "$(sysctl -n net.ipv4.tcp_congestion_control)" = "bbr" ] || die "TCP拥塞控制算法设置失败。"
    [ "$(sysctl -n net.core.default_qdisc)" = "fq" ] || die "默认队列规则设置失败。"

    echo -e "\n\033[32m✅ 所有优化已成功应用！\033[0m"
}

main "$@"
